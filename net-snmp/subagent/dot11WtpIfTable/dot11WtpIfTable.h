/*
 * Note: this file originally auto-generated by mib2c using
 *       version : 1.32.2.3 $ of : mfd-top.m2c,v $
 *
 * $Id:$
 */
#ifndef DOT11WTPIFTABLE_H
#define DOT11WTPIFTABLE_H

#ifdef __cplusplus
extern "C" {
#endif


/** @defgroup misc misc: Miscelaneous routines
 *
 * @{
 */
#include <net-snmp/library/asn1.h>

/* other required module components */
    /* *INDENT-OFF*  */
config_require(DOT11-WTP-MIB/dot11WtpIfTable/dot11WtpIfTable_interface);
config_require(DOT11-WTP-MIB/dot11WtpIfTable/dot11WtpIfTable_data_access);
config_require(DOT11-WTP-MIB/dot11WtpIfTable/dot11WtpIfTable_data_get);
config_require(DOT11-WTP-MIB/dot11WtpIfTable/dot11WtpIfTable_data_set);
    /* *INDENT-ON*  */

/* OID and column number definitions for  */
#include "dot11WtpIfTable_oids.h"

/* enum definions */
#include "dot11WtpIfTable_enums.h"
#include "ws_dbus_list_interface.h"

/* *********************************************************************
 * function declarations
 */
void init_dot11WtpIfTable(void);

/* *********************************************************************
 * Table declarations
 */
/**********************************************************************
 **********************************************************************
 ***
 *** Table dot11WtpIfTable
 ***
 **********************************************************************
 **********************************************************************/
/*
 * dot11WtpIfTable is subid 1 of wtpInterface.
 * Its status is Current.
 * OID: .1.3.6.1.4.1.31656.6.1.1.3.1, length: 12
*/
/* *********************************************************************
 * When you register your mib, you get to provide a generic
 * pointer that will be passed back to you for most of the
 * functions calls.
 *
 * TODO:100:r: Review all context structures
 */
    /*
     * TODO:101:o: |-> Review dot11WtpIfTable registration context.
     */
typedef netsnmp_data_list * dot11WtpIfTable_registration_ptr;

#define U64 unsigned long long 

/**********************************************************************/
/*
 * TODO:110:r: |-> Review dot11WtpIfTable data context structure.
 * This structure is used to represent the data for dot11WtpIfTable.
 */
/*
 * This structure contains storage for all the columns defined in the
 * dot11WtpIfTable.
 */
typedef struct dot11WtpIfTable_data_s {
    dbus_parameter parameter;
	long wtpIfIndex;
	long wtpCurrID;
        /*
         * wtpMTU(2)/INTEGER/ASN_INTEGER/long(long)//l/A/w/e/r/d/h
         */
   long   wtpMTU;
    
        /*
         * wtpIfSpeed(3)/GAUGE/ASN_GAUGE/u_long(u_long)//l/A/W/e/r/d/h
         */
   u_long   wtpIfSpeed;
    
        /*
         * wtpIfPhyAddr(4)/PhysAddress/ASN_OCTET_STR/char(char)//L/A/w/e/r/d/h
         */
   char   wtpIfPhyAddr[255];
size_t      wtpIfPhyAddr_len; /* # of char elements, not bytes */
    
        /*
         * wtpIfIntro(5)/DisplayString/ASN_OCTET_STR/char(char)//L/A/w/e/R/d/H
         */
   char   wtpIfIntro[255];
size_t      wtpIfIntro_len; /* # of char elements, not bytes */
    
        /*
         * wtpIfName(6)/DisplayString/ASN_OCTET_STR/char(char)//L/A/w/e/R/d/H
         */
   char   wtpIfName[255];
size_t      wtpIfName_len; /* # of char elements, not bytes */
    
        /*
         * wtpIfType(7)/INTEGER/ASN_INTEGER/long(u_long)//l/A/w/E/r/d/h
         */
   u_long   wtpIfType;
    
        /*
         * wtpIfAdminStatus(8)/INTEGER/ASN_INTEGER/long(u_long)//l/A/W/E/r/d/h
         */
   u_long   wtpIfAdminStatus;
    
        /*
         * wtpIfOperStatus(9)/INTEGER/ASN_INTEGER/long(u_long)//l/A/w/E/r/d/h
         */
   u_long   wtpIfOperStatus;
    
        /*
         * wtpIfLastChange(10)/TICKS/ASN_TIMETICKS/u_long(u_long)//l/A/w/e/r/d/h
         */
   u_long   wtpIfLastChange;
    
        /*
         * wtpIfUplinkRealtimeRate(11)/COUNTER/ASN_COUNTER/u_long(u_long)//l/A/w/e/r/d/h
         */
   u_long   wtpIfUplinkRealtimeRate;
    
        /*
         * wtpIfDownlinkRealtimeRate(12)/COUNTER/ASN_COUNTER/u_long(u_long)//l/A/w/e/r/d/h
         */
   u_long   wtpIfDownlinkRealtimeRate;

    u_long   wtpIfUplinkRealtimeKbyteRate;
    u_long   wtpIfDownlinkRealtimeKbyteRate;    
        /*
         * wtpipv6IfInReceivesPkts(15)/COUNTER64/ASN_COUNTER64/U64(U64)//l/A/w/e/r/d/h
         */
   U64   wtpipv6IfInReceivesPkts;
    
        /*
         * wtpipv6IfInHdrErrorsPkts(16)/COUNTER64/ASN_COUNTER64/U64(U64)//l/A/w/e/r/d/h
         */
   U64   wtpipv6IfInHdrErrorsPkts;
    
        /*
         * wtpipv6IfInTooBigErrorsPkts(17)/COUNTER64/ASN_COUNTER64/U64(U64)//l/A/w/e/r/d/h
         */
   U64   wtpipv6IfInTooBigErrorsPkts;
    
        /*
         * wtpipv6IfInNoRoutesPkts(18)/COUNTER64/ASN_COUNTER64/U64(U64)//l/A/w/e/r/d/h
         */
   U64   wtpipv6IfInNoRoutesPkts;
    
        /*
         * wtpipv6IfInAddrErrorsPkts(19)/COUNTER64/ASN_COUNTER64/U64(U64)//l/A/w/e/r/d/h
         */
   U64   wtpipv6IfInAddrErrorsPkts;
    
        /*
         * wtpipv6IfInUnknownProtosPkts(20)/COUNTER64/ASN_COUNTER64/U64(U64)//l/A/w/e/r/d/h
         */
   U64   wtpipv6IfInUnknownProtosPkts;
    
        /*
         * wtpipv6IfInTruncatedPkts(21)/COUNTER64/ASN_COUNTER64/U64(U64)//l/A/w/e/r/d/h
         */
   U64   wtpipv6IfInTruncatedPkts;
    
        /*
         * wtpipv6IfInDiscardsPkts(22)/COUNTER64/ASN_COUNTER64/U64(U64)//l/A/w/e/r/d/h
         */
   U64   wtpipv6IfInDiscardsPkts;
    
        /*
         * wtpipv6IfInDeliversPkts(23)/COUNTER64/ASN_COUNTER64/U64(U64)//l/A/w/e/r/d/h
         */
   U64   wtpipv6IfInDeliversPkts;
    
        /*
         * wtpipv6IfOutForwDatagramsPkts(24)/COUNTER64/ASN_COUNTER64/U64(U64)//l/A/w/e/r/d/h
         */
   U64   wtpipv6IfOutForwDatagramsPkts;
    
        /*
         * wtpipv6IfOutRequestsPkts(25)/COUNTER64/ASN_COUNTER64/U64(U64)//l/A/w/e/r/d/h
         */
   U64   wtpipv6IfOutRequestsPkts;
    
        /*
         * wtpipv6IfOutDiscardsPkts(26)/COUNTER64/ASN_COUNTER64/U64(U64)//l/A/w/e/r/d/h
         */
   U64   wtpipv6IfOutDiscardsPkts;
    
        /*
         * wtpipv6IfOutFragOKsPkts(27)/COUNTER64/ASN_COUNTER64/U64(U64)//l/A/w/e/r/d/h
         */
   U64   wtpipv6IfOutFragOKsPkts;
    
        /*
         * wtpipv6IfOutFragFailsPkts(28)/COUNTER64/ASN_COUNTER64/U64(U64)//l/A/w/e/r/d/h
         */
   U64   wtpipv6IfOutFragFailsPkts;
    
        /*
         * wtpipv6IfOutFragCreatesPkts(29)/COUNTER64/ASN_COUNTER64/U64(U64)//l/A/w/e/r/d/h
         */
   U64   wtpipv6IfOutFragCreatesPkts;
    
        /*
         * wtpipv6IfReasmReqdsPkts(30)/COUNTER64/ASN_COUNTER64/U64(U64)//l/A/w/e/r/d/h
         */
   U64   wtpipv6IfReasmReqdsPkts;
    
        /*
         * wtpipv6IfReasmOKsPkts(31)/COUNTER64/ASN_COUNTER64/U64(U64)//l/A/w/e/r/d/h
         */
   U64   wtpipv6IfReasmOKsPkts;
    
        /*
         * wtpipv6IfReasmFailsPkts(32)/COUNTER64/ASN_COUNTER64/U64(U64)//l/A/w/e/r/d/h
         */
   U64   wtpipv6IfReasmFailsPkts;
    
        /*
         * wtpipv6IfInMcastPkts(33)/COUNTER64/ASN_COUNTER64/U64(U64)//l/A/w/e/r/d/h
         */
   U64   wtpipv6IfInMcastPkts;
    
        /*
         * wtpipv6IfOutMcastPkts(34)/COUNTER64/ASN_COUNTER64/U64(U64)//l/A/w/e/r/d/h
         */
   U64   wtpipv6IfOutMcastPkts;
    
} dot11WtpIfTable_data;


/* *********************************************************************
 * TODO:115:o: |-> Review dot11WtpIfTable undo context.
 * We're just going to use the same data structure for our
 * undo_context. If you want to do something more efficent,
 * define your typedef here.
 */
typedef dot11WtpIfTable_data dot11WtpIfTable_undo_data;

/*
 * TODO:120:r: |-> Review dot11WtpIfTable mib index.
 * This structure is used to represent the index for dot11WtpIfTable.
 */
typedef struct dot11WtpIfTable_mib_index_s {

        /*
         * wtpMacAddr(1)/Dot11BaseWtpIdTC/ASN_OCTET_STR/char(char)//L/A/w/e/r/d/h
         */
        /** 128 - 1(other indexes) - oid length(14) = 112 */
   char   wtpMacAddr[112];
   size_t      wtpMacAddr_len;

        /*
         * wtpIfIndex(1)/INTEGER/ASN_INTEGER/long(long)//l/A/w/e/r/d/h
         */
   long   wtpIfIndex;


} dot11WtpIfTable_mib_index;

    /*
     * TODO:121:r: |   |-> Review dot11WtpIfTable max index length.
     * If you KNOW that your indexes will never exceed a certain
     * length, update this macro to that length.
     *
     * BE VERY CAREFUL TO TAKE INTO ACCOUNT THE MAXIMUM
     * POSSIBLE LENGHT FOR EVERY VARIABLE LENGTH INDEX!
     * Guessing 128 - col/entry(2)  - oid len(12)
*/
#define MAX_dot11WtpIfTable_IDX_LEN     114


/* *********************************************************************
 * TODO:130:o: |-> Review dot11WtpIfTable Row request (rowreq) context.
 * When your functions are called, you will be passed a
 * dot11WtpIfTable_rowreq_ctx pointer.
 */
typedef struct dot11WtpIfTable_rowreq_ctx_s {

    /** this must be first for container compare to work */
    netsnmp_index        oid_idx;
    oid                  oid_tmp[MAX_dot11WtpIfTable_IDX_LEN];
    
    dot11WtpIfTable_mib_index        tbl_idx;
    
    dot11WtpIfTable_data              data;
    dot11WtpIfTable_undo_data       * undo;
    unsigned int                column_set_flags; /* flags for set columns */


    /*
     * flags per row. Currently, the first (lower) 8 bits are reserved
     * for the user. See mfd.h for other flags.
     */
    u_int                       rowreq_flags;

    /*
     * implementor's context pointer (provided during registration)
     */
    dot11WtpIfTable_registration_ptr dot11WtpIfTable_reg;

    /*
     * TODO:131:o: |   |-> Add useful data to dot11WtpIfTable rowreq context.
     */
    
    /*
     * storage for future expansion
     */
    netsnmp_data_list             *dot11WtpIfTable_data_list;

} dot11WtpIfTable_rowreq_ctx;

typedef struct dot11WtpIfTable_ref_rowreq_ctx_s {
    dot11WtpIfTable_rowreq_ctx *rowreq_ctx;
} dot11WtpIfTable_ref_rowreq_ctx;

/* *********************************************************************
 * function prototypes
 */
    int dot11WtpIfTable_pre_request(dot11WtpIfTable_registration_ptr user_context);
    int dot11WtpIfTable_post_request(dot11WtpIfTable_registration_ptr user_context);

    int dot11WtpIfTable_check_dependencies(dot11WtpIfTable_rowreq_ctx * rowreq_ctx); 
    int dot11WtpIfTable_commit(dot11WtpIfTable_rowreq_ctx * rowreq_ctx);

extern oid dot11WtpIfTable_oid[];
extern int dot11WtpIfTable_oid_size;


#include "dot11WtpIfTable_interface.h"
#include "dot11WtpIfTable_data_access.h"
#include "dot11WtpIfTable_data_get.h"
#include "dot11WtpIfTable_data_set.h"

/*
 * DUMMY markers, ignore
 *
 * TODO:099:x: *************************************************************
 * TODO:199:x: *************************************************************
 * TODO:299:x: *************************************************************
 * TODO:399:x: *************************************************************
 * TODO:499:x: *************************************************************
 */

#ifdef __cplusplus
}
#endif

#endif /* DOT11WTPIFTABLE_H */
